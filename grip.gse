// ---------------------------------------------------------
// XY_ABS(x,y)
// Return the value of the cell x columns right & y rows down from the top-left corner of the page. x & y can only be positive. Variant of XY.

=INDEX(BASE_SHEET(),y,x)

=INDIRECT(
  "R"& y &""&
  "C"& x &"", 
  FALSE)

// ---------------------------------------------------------
// _X(x)
// Move only horizontally from current cell, changing columns but staying in the same row. Leftwards is negative, rightwards is positive.
// x = Leftwards is negative, rightwards is positive. 0, -1, 1
=XY(x, 0)

=MAP(B5:C6,  LAMBDA(x, 
    COLUMN(x)&","&ROW(x)
  ))

// ---------------------------------------------------------
// _Y(x)
// Move only vertically, changing rows but staying in the same column. Upwards is negative, downwards is positive. Called _Y because Y is a reserved keyword (it's AND!).
// y = Rows to move. Upwards is negative, downwards is positive. 0, -1, 1
=_XY(0, y)

// ---------------------------------------------------------
// RANGE_XY(range, x, y)
// Return the cell that is at (x,y) in the given range.
// x & y are relative offsets.
=INDEX(range,y,x)

// ---------------------------------------------------------
// RANGE_XY_REPLACE(range, x, y, replace)
// Replace the cell that is at (x,y) in the given range.
=MAP(range, LAMBDA(cell,
  LAMBDA(_x, _y,
    IF(AND(_x=x, _y=y),
      replace,
      cell
    )
  )(
    COLUMN(cell)-COLUMN(range)+1,
    ROW(cell)-ROW(range)+1
  )
  ))

// THIS WOOOOORKS
=LAMBDA(range, 
  MAP(range, LAMBDA(cell,
    LAMBDA(_x, _y,
      IF(AND(_x=1, _y=2),
        "replace",
        cell
      )
    )(
      COLUMN(cell)-COLUMN(range)+1,
      ROW(cell)-ROW(range)+1
    )
   ))
)(
  A1:B2
)

=LAMBDA(range, 
  MAP(range, LAMBDA(cell, 
      COLUMN(cell)&","&ROW(cell)&"; "&COLUMN(range)&","&ROW(range)
   ))
)(
  A1:B2
)

=MAP(B5:C6, LAMBDA(x, 
    COLUMN(x)&","&ROW(x)&"; "&MATCH(B5:C6, x)
  ))

// ---------------------------------------------------------
//QUOTE
//A simulation of what QUOTE might be. Can only handle ranges as input for now.
=FORMULATEXT(range)

// ---------------------------------------------------------
//EVAL
//A simulation of what EVAL might be.

=LAMBDA(inside,
  MAP(
    ARRAYFORMULA(
      SPLIT(
        TRANSPOSE(
          SPLIT( inside, ";" )
        ),
      ",")
    ),
    LAMBDA(cell,
      IF(ISTEXT(cell),
        MID(cell,2,LEN(cell)-2),
        cell
      )
    )
  )
)(
  REGEXREPLACE(
    REGEXREPLACE(G27,"^=",""),
      "[{}]","")
)

=LAMBDA(inside,
  MAP(
    ARRAYFORMULA(
      SPLIT(
        TRANSPOSE(
          SPLIT( inside, ";" )
        ),
      ",")
    ),
    LAMBDA(cell,
      IF(ISTEXT(cell),
        IF(MID(cell,2,1)="=",
          LAMBDA(fun, arg,
            IFS(
              fun="_X", _X(arg),
              fun="_Y", _Y(arg),
              fun="XY", XY(arg),
              TRUE, cell
            )
          )(
            MID(cell,3,2), MID(cell,6,2)
          ),
          MID(cell,2,LEN(cell)-2)
        ),
        cell
      )
    )
  )
)(
  REGEXREPLACE(
    REGEXREPLACE(G27,"^=",""),
      "[{}]","")
)

// hell yeah, this works!
=LAMBDA(inside,
  ARRAYFORMULA(
    SPLIT(
      TRANSPOSE(
        SPLIT( inside, ";" )
      ),
    ",")
  )
)(
  REGEXREPLACE(G27,"[={}]","")
)

// huh, I get error: Nested array results are not supported!
=LAMBDA(inside,
  MAP(
    TRANSPOSE(
      SPLIT( inside, ";" )
    ),
    LAMBDA(rows, 
      SPLIT(rows,",")
    )
  )
)(
  REGEXREPLACE(string,"[={}]","")
)

=LAMBDA(inside,
  SPLIT(inside,",")
)(
  REGEXREPLACE(string,"[={}]","")
)

=SPLIT(REGEXREPLACE(G27,"[={}]",""),",")

// ---------------------------------------------------------
// _XY(x, y)
// Returns the value of the cell that's x & y from the current cell (which is (0,0)). x offset moves by columns: leftwards is negative, rightwards is positive. y offset moves by rows: upwards is negative, downwards is positive.
// See https://www.benlcollins.com/spreadsheets/indirect-function/
// Wanted to call this RC but Sheets claims it's invalid, probably because it looks like RC syntax.
// x = Column index. 1, COL(rowLabelCol)
// y = Row index. 1, 2

=INDIRECT("R["& y &"]C["& x &"]", FALSE)